<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Bobson&#39;s Blog</title>
    <link>https://bbsonlin.github.io/categories/tech/</link>
    <description>Recent content in Tech on Bobson&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Mar 2019 09:57:07 +0800</lastBuildDate>
    
	<atom:link href="https://bbsonlin.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dart 基礎 - 3</title>
      <link>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</link>
      <pubDate>Thu, 21 Mar 2019 09:57:07 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</guid>
      <description>運算子(Operators)  四則運算、邏輯運算、程式運算等比較基礎的運算部份請參看官方文檔。
在此講一些比較特別的運算子
 as, is, is! // Type test operators  num n = 1.1; print(n is! int); print(n is double);true true 條件算符(Conditional expressions) 大部分程式語言都會有三元運算子 ?:，它可以很簡短的代替 if-else 語法。 Dart 中有幾個比較有趣的寫法 ??、?. 等。
?? 與 ?. 都會判斷左方的運算元是否為 null，再進行動作。
 此範例若有些看不懂，可以看完下面一節 類別(上) 後再回頭看一次這裡。
 class Account { String username; String password; Account({username, password}) : this.username = username, // 下面兩種寫法是等價的  // this.password = (password != null) ? password : &amp;#39;AutomaticallyGenerateSecretPassword&amp;#39;;  this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 2</title>
      <link>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</link>
      <pubDate>Fri, 15 Mar 2019 23:21:52 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</guid>
      <description>變數(Variables) Dart 2 可以不宣告變數型別方式有兩種 var 和 dynamic。
這兩個看似用法相同但不一樣，其中 var 會在 Compile-time 的時候就會自行判斷你賦予此變數值的型別； 所以再次賦予不同型別的值給此變數，會出現錯誤 Error: A value of type &#39;int&#39; can&#39;t be assigned to a variable of type &#39;String&#39;.。
而 dynamic 則是能在 Run-time 時放進任何型別的變數。
var name = &amp;#34;Bobson&amp;#34;; // name = 123;  // Error: A value of type &amp;#39;int&amp;#39; can&amp;#39;t be assigned to a variable of type &amp;#39;String&amp;#39;.  print(name); dynamic myName = &amp;#34;Bobson&amp;#34;; print(myName); myName = 123; print(myName);Bobson Bobson 123  任何變數宣告出來沒賦予值的話，預設會給 null</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 1</title>
      <link>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</link>
      <pubDate>Fri, 08 Mar 2019 21:29:43 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</guid>
      <description>內建型別 (Built-in types)  Dart 內建型別全都繼承於 Object，都視為是物件。
 Dart 內建型別有下列幾種:
 Number - (int, double) num Boolean - true 或 false List - Collections of items (aka arrays) Set - Collection of unique items (Dart 2.2 正式引入) Map - Collections with associated Key Value Pairs String - &amp;ldquo;Hello!&amp;rdquo; (single and double quotes) Rune - unicode character points Symbol - #symbol (simbolic metadata)  Number num 包含了兩種型別 int, double
int x = 1; int hex = 0xFA; print(&amp;#34;int: $x, hex int: $hex&amp;#34;); double y = 1.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 4</title>
      <link>https://bbsonlin.github.io/post/2018-12-16-opencv-tutorial-4/</link>
      <pubDate>Sun, 16 Dec 2018 14:34:25 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-16-opencv-tutorial-4/</guid>
      <description>影像平滑  從 阿洲的程式教學 | OpenCV教學 - 影像平滑 引述：
有時我們收到的影像雜訊過多，這時需要進行平滑化去除雜訊，不過為了去除雜訊，可能造成影像對比度下降，好的品質可能需要大量的處理時間，所以通常根據實際需求，選擇一個適合的手法，常見的有四種平滑方式，分別是平均平滑、高斯平滑、中值濾波、雙邊濾波，OpenCV對於這四種平滑方式皆有支援，只要呼叫即可使用。
  由濾波方式可分兩種，線性濾波和非線性濾波：
* 線性濾波：有一個有固定參數的核心，常見的有平均平滑和高斯平滑。
* 非線性濾波：沒有一個有固定參數的核心，常見的有中值濾波和雙邊濾波。
  OpenCV functions:
* 平均平滑: cv2.filter2D 與 cv2.blur
* 高斯平滑: cv2.GaussianBlur
* 中值濾波: cv2.medianBlur
* 雙邊濾波: cv2.bilateralFilter
 import cv2 import numpy as np from matplotlib import pyplot as plt def draw_on_plot(pos, src, title): plt.subplot(pos), plt.imshow(src), plt.title(title) plt.xticks([]), plt.yticks([]) img = cv2.imread(&amp;#39;data/opencv-logo-white.png&amp;#39;) draw_on_plot(241, img, &amp;#39;Original&amp;#39;) kernel = np.ones((3, 3), np.float32)/25 dst = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 3</title>
      <link>https://bbsonlin.github.io/post/2018-12-14-opencv-tutorial-3/</link>
      <pubDate>Fri, 14 Dec 2018 10:37:18 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-14-opencv-tutorial-3/</guid>
      <description>色彩空間轉換  在 Opencv-Python 學習之旅 - 1 起步 - 照片(影像) 中imread函數就有選擇讀取照片時你想要的色彩標誌參數 (BGR, HSV &amp;hellip; 等)。
在 OpenCV 中還有其他的函數來作色彩空間轉換的處理。
 import cv2 img = cv2.imread(&amp;#39;data/starry_night.jpg&amp;#39;) # Convert BGR to HSV hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) # (600, 752, 3) 1353600 &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt; print(hsv.shape, hsv.size, type(hsv)) # define range of blue color in HSV lower_blue = np.array([110, 50, 50]) upper_blue = np.array([130, 255, 255]) # Threshold the HSV image to get only blue colors mask = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 2</title>
      <link>https://bbsonlin.github.io/post/2018-12-12-opencv-tutorial-2/</link>
      <pubDate>Wed, 12 Dec 2018 16:39:26 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-12-opencv-tutorial-2/</guid>
      <description>影像基本運算 import cv2 img = cv2.imread(&amp;#39;data/messi5.jpg&amp;#39;) px = img[100, 100] print(px, px.shape, px.size, px.dtype, type(px)) # accessing only blue pixel blue = img[100, 100, 0] print(blue, type(blue)) img[100, 100] = [255, 255, 255] img[100, 101] = [255, 255, 255] print(img[100, 100]) # accessing RED value print(img.item(10, 10, 2)) # modifying RED value img.itemset((10, 10, 2), 100) print(img.item(10, 10, 2)) print(img.shape, img.size, img.dtype, type(img)) ball = img[280:340, 330:390] img[273:333, 100:160] = ball b, g, r = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 1</title>
      <link>https://bbsonlin.github.io/post/2018-12-11-opencv-tutorial-1/</link>
      <pubDate>Tue, 11 Dec 2018 14:18:33 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-11-opencv-tutorial-1/</guid>
      <description>安裝 筆者的環境使用 Ubuntu 18.04，利用 pipenv 安裝 opencv-python 套件
起步 - 照片(影像) import cv2 img = cv2.imread(&amp;#39;data/messi5.jpg&amp;#39;, 0) cv2.imshow(&amp;#39;image&amp;#39;, img) k = cv2.waitKey(0) if k == 27: # wait for ESC key to exit cv2.destroyAllWindows() elif k == ord(&amp;#39;s&amp;#39;): # wait for &amp;#39;s&amp;#39; key to save and exit cv2.imwrite(&amp;#39;out/messigray.png&amp;#39;, img) cv2.destroyAllWindows()  用 cv2.imread 讀取影像檔案，第一個參數為檔案位置(String);第二個參數為讀取影像檔的顏色參數。 第二個參數有很多選項，如 cv2.IMREAD_COLOR、cv2.IMREAD_GREYSCALE、cv2.IMREAD_UNCHANGED &amp;hellip; 更多 用 cv2.imshow 可顯示用 cv2.imread 讀取進來的影像資訊 cv2.waitKey 會等待任何鍵盤事件；cv2.destroyAllWindows 會關閉所有視窗。 按下鍵盤 s，會調用 cv2.imwrite 存處理後的 img 圖檔 相關 API 文檔 reading and writing images、user interface  # Use matplotlib from matplotlib import pyplot as plt plt.</description>
    </item>
    
    <item>
      <title>Flutter 開始探索</title>
      <link>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</link>
      <pubDate>Thu, 15 Nov 2018 12:23:48 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</guid>
      <description>移動端的開發框架 主要考慮 React Native 和 Flutter
 Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 這框架會比較好，但 React 上手難度較高 由於使用叫高級的程式語言，效能上容易被詬病   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是能需要編譯的，效能上比較好  劣勢:  推出時間短(約一年半)，整體框架以及社群尚在發展中    備註:</description>
    </item>
    
    <item>
      <title>用 Hugo 建置我的部落格 - 2</title>
      <link>https://bbsonlin.github.io/post/2018-11-14-use-hugo-to-build-my-blog-2/</link>
      <pubDate>Wed, 14 Nov 2018 11:35:17 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-14-use-hugo-to-build-my-blog-2/</guid>
      <description>上一篇 - 用 Hugo 建置我的部落格 - 1
如何讓大家都看到我? 其實 Hugo 官方文件裡有一篇 託管與佈署，裡頭有佈署到不同托管服務的方法。 不過我想這邊我就直接先使用 Github Pages 吧。
初出江湖 - 佈署到 Github Page 官方文件一開始看有點雜亂，後來是找到這位大老的教學影片才順利佈署完成
建立 Repository
 主要是建立兩個程式碼倉庫 blog 和 &amp;lt;USERNAME&amp;gt;.github.io，前者是主要編輯文章內容；後者是放置靜態網頁的部份。 啟用 &amp;lt;USERNAME&amp;gt;.github.io Github Pages 服務。(在 Repo 的 Settings -&amp;gt; Github Pages) Github Pages 的形式有兩種：  https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/ - 這種是給帳戶放置首頁的，必須要對應到 &amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io 的 Repo https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/ - 其餘你創建的 Poject Repo 的靜態網頁都可以佈署到相對應的 URL。   輸出靜態網頁
$ hugo -d ../&amp;lt;USERNAME&amp;gt;.github.io  在編輯文章內容的 Repo 下，輸出靜態網頁到放置靜態網頁 Repo 接著在將你輸出的內容 push 到 github 上就行囉~ 😃  備註:</description>
    </item>
    
    <item>
      <title>用 Hugo 建置我的部落格 - 1</title>
      <link>https://bbsonlin.github.io/post/2018-11-13-use-hugo-to-build-my-blog-1/</link>
      <pubDate>Tue, 13 Nov 2018 18:17:57 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-13-use-hugo-to-build-my-blog-1/</guid>
      <description>為什麼選 Hugo 比較了幾個常見的部落格建置工具以及其開發的語言:
 Jekyll - Ruby
 Hugo - Golang
 Hexo - Javascript
  主要原因:
 Hugo 是用 Golang 寫的，安裝的時候不用其他 package manager (Ruby 要用 gem, JS 要用 npm) Hugo 是用 Golang 寫的，整體操作的速度會較快 (詳細可能要多接觸後才了解)  個人(非必要)原因:
 開發環境大多都用 Ubuntu (沒錢買 Mac&amp;hellip;)，剛好 Ubuntu 16.04 後有 snapcraft 做軟體的管理，而 Hugo 剛好在上面有版本，安裝起來非常快。
 對於 JS 較熟(前端接觸了一年多)，Ruby 稍微有點退燒了，而 Golang 越來越火，看順便能不能藉此機會接觸一些 Golang 的專案。  備註:
- 比較的部落格建置工具均為 static site generater
- 選擇工具為個人喜好決定，並無絕對的好壞，自己用的上手最重要
尋找巨人們(資源) 經過一天的尋找，找到了些巨人們:</description>
    </item>
    
  </channel>
</rss>