<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dart on Bobson&#39;s Blog</title>
    <link>https://bbsonlin.github.io/tags/dart/</link>
    <description>Recent content in Dart on Bobson&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Apr 2019 09:30:23 +0800</lastBuildDate>
    
	<atom:link href="https://bbsonlin.github.io/tags/dart/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dart 基礎 - 5</title>
      <link>https://bbsonlin.github.io/post/2019-04-08-dart-basic-part-5/</link>
      <pubDate>Mon, 08 Apr 2019 09:30:23 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-04-08-dart-basic-part-5/</guid>
      <description>類別(Class) - 下篇  延續上一節的 類別(Class) - 中篇
 抽象類別(Abstract class)  在 類別(Class) - 中篇 我們有提到 抽象方法(Abstract methods)，抽象類別裡的函數稱作此。
這次要來深入點講解 抽象類別。
 簡單來說，抽象類別是定義其他類別的 界面 (interface) (可以想像成樣板)，所有 繼承 (extends) 或 實現 (implements) 於此 抽象類別 的類別必須要實作此 抽象類別 裡定義的所有方法。
這樣講完其實還真的是滿 &amp;ldquo;抽象&amp;rdquo; 的，所以就看看例子吧~
abstract class Shape { double get perimeter; double get area; String get name; } 以上我們自行定義個抽象類別 Shape，裡頭有三個 Getter 函數，perimeter(周長)、area(面積)、name(描述此形狀)。
接下來我們基於 Shape 來 &amp;ldquo;實現&amp;rdquo; Circle 圓形類別。
class Circle extends Shape { double radius; Circle(this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 4</title>
      <link>https://bbsonlin.github.io/post/2019-03-26-dart-basic-part-4/</link>
      <pubDate>Tue, 26 Mar 2019 14:45:27 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-26-dart-basic-part-4/</guid>
      <description>類別(Class) - 中篇  延續上一節的 類別(Class) - 上篇
 方法(Methods) Dart 中有幾種類別中的方法:
 實例方法(Instance methods) - 就是一般類別中標準的函數，使用的時候要先以類別實例化出物件，該物件才能使用此方法。 靜態方法(Static methods) - 跟一般類別中的函數很像，不過它不用實例化便可使用該方法，通常是與該類別相關所以會定義在類別裡。 抽象方法(Abstract methods) - 抽象類別中的函數，用來定義樣板(或稱界面[interface])，繼承該抽象類別後所需實現(implement)的函數。 Getters &amp;amp; Setters - 範例中 Complex 的 real 和 imaginary 運算子方法(Operator methods) - Dart 中可以 Override 幾個常用的運算子的方法，如 + - * / &amp;gt; &amp;lt; ==&amp;hellip; 等等。   != 是不可複寫的，因為它相當於 !(a == b)
 我們在 Complex 中再加入些方法吧
class Complex { // Private property(member)  num _real; num _imaginary; // Getters &amp;amp; Setters  get real =&amp;gt; _real; set real(num newReal) =&amp;gt; _real = newReal; get imaginary =&amp;gt; _imaginary; set imaginary(num newImaginary) =&amp;gt; _imaginary = newImaginary; // Constructors  Complex(this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 3</title>
      <link>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</link>
      <pubDate>Thu, 21 Mar 2019 09:57:07 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</guid>
      <description>運算子(Operators)  四則運算、邏輯運算、程式運算等比較基礎的運算部份請參看官方文檔。
在此講一些比較特別的運算子
 as, is, is! // Type test operators  num n = 1.1; print(n is! int); print(n is double);true true 條件算符(Conditional expressions) 大部分程式語言都會有三元運算子 ?:，它可以很簡短的代替 if-else 語法。 Dart 中有幾個比較有趣的寫法 ??、?. 等。
?? 與 ?. 都會判斷左方的運算元是否為 null，再進行動作。
 此範例若有些看不懂，可以看完下面一節 類別(上) 後再回頭看一次這裡。
 class Account { String username; String password; Account({username, password}) : this.username = username, // 下面兩種寫法是等價的  // this.password = (password != null) ? password : &amp;#39;AutomaticallyGenerateSecretPassword&amp;#39;;  this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 2</title>
      <link>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</link>
      <pubDate>Fri, 15 Mar 2019 23:21:52 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</guid>
      <description>變數(Variables) Dart 2 可以不宣告變數型別方式有兩種 var 和 dynamic。
這兩個看似用法相同但不一樣，其中 var 會在 Compile-time 的時候就會自行判斷你賦予此變數值的型別； 所以再次賦予不同型別的值給此變數，會出現錯誤 Error: A value of type &#39;int&#39; can&#39;t be assigned to a variable of type &#39;String&#39;.。
而 dynamic 則是能在 Run-time 時放進任何型別的變數。
var name = &amp;#34;Bobson&amp;#34;; // name = 123;  // Error: A value of type &amp;#39;int&amp;#39; can&amp;#39;t be assigned to a variable of type &amp;#39;String&amp;#39;.  print(name); dynamic myName = &amp;#34;Bobson&amp;#34;; print(myName); myName = 123; print(myName);Bobson Bobson 123  任何變數宣告出來沒賦予值的話，預設會給 null</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 1</title>
      <link>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</link>
      <pubDate>Fri, 08 Mar 2019 21:29:43 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</guid>
      <description>內建型別 (Built-in types)  Dart 內建型別全都繼承於 Object，都視為是物件。
 Dart 內建型別有下列幾種:
 Number - (int, double) num Boolean - true 或 false List - Collections of items (aka arrays) Set - Collection of unique items (Dart 2.2 正式引入) Map - Collections with associated Key Value Pairs String - &amp;ldquo;Hello!&amp;rdquo; (single and double quotes) Rune - unicode character points Symbol - #symbol (simbolic metadata)  Number num 包含了兩種型別 int, double
int x = 1; int hex = 0xFA; print(&amp;#34;int: $x, hex int: $hex&amp;#34;); double y = 1.</description>
    </item>
    
  </channel>
</rss>