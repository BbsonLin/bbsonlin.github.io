<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on Bobson&#39;s Blog</title>
    <link>https://bbsonlin.github.io/tags/flutter/</link>
    <description>Recent content in Flutter on Bobson&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Sep 2019 14:13:29 +0800</lastBuildDate>
    
	<atom:link href="https://bbsonlin.github.io/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day11</title>
      <link>https://bbsonlin.github.io/post/2019-09-20-build-android-app-with-flutter-11/</link>
      <pubDate>Fri, 20 Sep 2019 14:13:29 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-20-build-android-app-with-flutter-11/</guid>
      <description>Day 11. 設定頁面  本系列同步發表在 第11屆鐵人賽
 設定頁面(SettingPage) 這次的鐵人賽在設定頁面上，我想完成 2 個設定功能，主題(Theme)和語言(Language)。
從設計圖上可以看出來，設定頁面一部分是可以開合的列表。 這個一樣是源自 Material Design 的列表控制章節中的展開和閉合(Expand and collapse)
Flutter 中對應的 Widget 就是 ExpansionTile，它可以跟 ListTile 一樣直接使用在 ListView 裡面。
先直接來看看程式碼吧~
lib/pages/setting/setting.dart
import &amp;#34;package:flutter/material.dart&amp;#34;; import &amp;#39;package:gitme_reborn/components/setting/theme_option.dart&amp;#39;; class SettingPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(&amp;#34;Setting&amp;#34;), ), body: ListView( children: &amp;lt;Widget&amp;gt;[ ExpansionTile( leading: Icon(Icons.palette), title: Text(&amp;#34;Theme&amp;#34;), children: &amp;lt;Widget&amp;gt;[ Wrap( spacing: 8.0, children: &amp;lt;Widget&amp;gt;[ ThemeOption(color: Colors.black), ThemeOption(color: Colors.</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day10</title>
      <link>https://bbsonlin.github.io/post/2019-09-19-build-android-app-with-flutter-10/</link>
      <pubDate>Thu, 19 Sep 2019 14:11:48 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-19-build-android-app-with-flutter-10/</guid>
      <description>Day 10. 趨勢頁面  本系列同步發表在 第11屆鐵人賽
 趨勢頁面(Trending Page) 好久沒從 UI 設計圖來分解該怎麼轉換成程式碼了。
今天就看個分解圖吧~
lib/pages/trending/trending.dart
import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:gitme_reborn/pages/trending/developer.dart&amp;#39;; import &amp;#39;package:gitme_reborn/pages/trending/project.dart&amp;#39;; class TrendingPage extends StatelessWidget { @override Widget build(BuildContext context) { return DefaultTabController( length: 2, child: Scaffold( appBar: AppBar( title: TabBar( tabs: &amp;lt;Widget&amp;gt;[ Tab(text: &amp;#34;Project&amp;#34;), Tab(text: &amp;#34;Developer&amp;#34;), ], ), actions: &amp;lt;Widget&amp;gt;[ PopupMenuButton( itemBuilder: (BuildContext context) { return [ PopupMenuItem( child: Text(&amp;#34;Date range: daily&amp;#34;), ), ]; }, ), ], ), body: TabBarView( children: &amp;lt;Widget&amp;gt;[ TrendingProjects(), TrendingDevelopers(), ], ), ), ); } } 再來看看程式碼是不是清晰多了呢？ 原則上， TrendingPage 與 MainPage 差不多，我幾乎是同一套排版直接拿過來用的。</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day9</title>
      <link>https://bbsonlin.github.io/post/2019-09-18-build-android-app-with-flutter-9/</link>
      <pubDate>Wed, 18 Sep 2019 08:58:23 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-18-build-android-app-with-flutter-9/</guid>
      <description>Day 9. 個人頁面(續)  本系列同步發表在 第11屆鐵人賽
 個人頁面(Profile Page) - 續 我們接續昨天的部份，接下來我們要完成個人頁面的下半部。
首先，第一個 Tab 就是倉庫頁(RepoPage)，是不是有種似曾相似的感覺？
沒錯，記得我們在 Day 5 時有創建一個 RepoPage 給主頁面使用嗎？
在這裡可以直接拿來復用的，我們就不客氣拿來用吧~
痾&amp;hellip;
果然，一切不會想像中的順利阿&amp;hellip;
在 RepoPage 裡向下滑動(捲動)，上面的 AppBar 竟然不會縮起來&amp;hellip;
 感性: 怎麼會這樣!?難道我寫錯了什麼嗎~~~ (崩潰
理性: 沒事，遇到問題根本就是工程師日常麻~ 平常心拉 (笑
感性: 那要怎麼解決呢? 揪命阿~~ (淚
理性: 別緊張，聰明的你一定知道，請教 Google 大神吧~ 哈哈
(腦內[腦補]小劇場)
 沒錯找 Google，一下就找到 StackOverflow - how to implement a sliverAppBar with a tabBar，裡頭有一個關鍵的 Widget: NestedScrollView。
我們讀一下 NestedScrollView 文件吧~
 在捲動畫面(視圖)中裡面可以包含不只一個捲動畫面(視圖)，且他們都需要知道目前捲動到的位置。
最常見的情況就是捲動畫面裡 SliverAppBar 中頂部包含一個 TabBar ，以及在 body 中使用 TabBarView (這樣作可基於 tab 來改變需捲動的內容)</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day8</title>
      <link>https://bbsonlin.github.io/post/2019-09-17-build-android-app-with-flutter-8/</link>
      <pubDate>Tue, 17 Sep 2019 08:53:38 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-17-build-android-app-with-flutter-8/</guid>
      <description>Day 8. 再修 Bug、個人頁面  本系列同步發表在 第11屆鐵人賽
 欸!? 還沒改完? 恩&amp;hellip; 越看越多東西需要修改一下&amp;hellip;
那麼接續昨天的議題。
 Login Page - password text hide &amp;amp; text show/hide switch
 修正的項目: * 密碼隱藏輸入字元 * 可切換密碼字元 顯示/隱藏
 隱藏輸入字元可藉著 TextFormField.obscureText 屬性來調整。
切換密碼字元 顯示/隱藏，參考 YouTube - Flutter - toggle password visibility
 Login Page - loading modal
 修正的項目: * Loading 底下有雙黃線 * 按下登入紐收起鍵盤
 Loading 字樣有雙黃線，參考了 StackOverflow - Yellow lines under Text Widgets in Flutter? 及相關 Issue Text in Hero red when animating #30647</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day7</title>
      <link>https://bbsonlin.github.io/post/2019-09-16-build-android-app-with-flutter-7/</link>
      <pubDate>Mon, 16 Sep 2019 17:51:34 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-16-build-android-app-with-flutter-7/</guid>
      <description>Day 7. 頁面刷新、修一些 Bug  本系列同步發表在 第11屆鐵人賽
 頁面刷新(Page Refresh) 和 StatefulWidget 今天來完成一下頁面刷新的部份，先拿 Day 5 完成的倉庫頁(RepoPage)來作些改變。
首先把原本得 Container 替換成 RefreshIndicator 這個 Widget，而使用RefreshIndicator 有一個一定要填入的屬性 onRefresh。
在 onRefresh 中，我們簡單的在先前宣告的 repoList 變數加上新的值，模擬頁面刷新時有新的資料加入。
但事情總不像我這憨人想像的如此容易&amp;hellip;
問題出在哪呢？ 我們可以把一些東西 print 出來看看
咦，在 Debug Console 中，我們卻實實在在地看到 repoList 裡有新增 {&amp;quot;title&amp;quot;: &amp;quot;BbsonLin/new-item&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;lang&amp;quot;: &amp;quot;&amp;quot;} 阿，這是怎回事呢？
原來，只是 Flutter 並不知道你的 repoList 要立即對應、更新你的頁面(因為我們這還是用 StatelessWidget&amp;hellip;)，那麼要怎樣作才能讓 Flutter 達成這效果呢？
沒錯，聰明的同學一下就知道還有 StatefulWidget 的存在。 下面我們就著手把 StatelessWidget 變成 StatefulWidget 吧~
 小提醒:
如果是使用 VSCode 作開發的話在 class 上方會出現燈泡點選之後，選擇 Convert to StatefulWidget，可以快速的變成 StatefulWidget 的形式喔。</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day6</title>
      <link>https://bbsonlin.github.io/post/2019-09-15-build-android-app-with-flutter-6/</link>
      <pubDate>Sun, 15 Sep 2019 12:55:26 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-15-build-android-app-with-flutter-6/</guid>
      <description>Day 6. 導覽選單、搜尋頁  本系列同步發表在 第11屆鐵人賽
 導覽選單(Drawer) 接下來完整導覽選單的部份，最上方 Header 的部份使用 UserAccountsDrawerHeader，這是 Flutter 幫我們打造的 material Widget，來符合一致的 Material 風格。
UserAccountsDrawerHeader( decoration: BoxDecoration( color: Colors.blueGrey, ), accountName: Text(&amp;#34;Bbson Lin&amp;#34;), accountEmail: Text(&amp;#34;bobson801104@gmail.com&amp;#34;), currentAccountPicture: CircleAvatar( backgroundImage: NetworkImage( &amp;#34;https://avatars2.githubusercontent.com/u/18156421?s=400&amp;amp;u=1f91dcf74134827fde071751f95522845223ed6a&amp;amp;v=4&amp;#34;, ), ), otherAccountsPictures: &amp;lt;Widget&amp;gt;[ Icon(Icons.edit, color: Colors.white), ], ), UserAccountsDrawerHeader 提供了幾個人性化的屬性，像是 accountName、accountEmail、currentAccountPicture &amp;hellip;等，只要將這些屬性填上你想要的 Widget 就行了。
導覽選單部份是用幾個 ListTile 做出來的，我們在 title 屬性多加了圖示。
ListTile( title: Row( children: &amp;lt;Widget&amp;gt;[ Icon(Icons.power_settings_new), SizedBox(width: 24.0), Text(&amp;#34;Sign out&amp;#34;), ], ), onTap: () async { await showDialog( context: context, barrierDismissible: false, builder: (context) =&amp;gt; AlertDialog( content: Text(&amp;#34;Are you sure to exit current account.</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day5</title>
      <link>https://bbsonlin.github.io/post/2019-09-14-build-android-app-with-flutter-5/</link>
      <pubDate>Sat, 14 Sep 2019 20:37:34 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-14-build-android-app-with-flutter-5/</guid>
      <description>Day 5. 登入登出、倉庫頁、近況頁與議題頁  本系列同步發表在 第11屆鐵人賽
 登入/登出 登入按下登入按鈕後的時候，需要有一個 Loading 的 Modal。
如圖
而在 Flutter 所提供的 Material 元件裡找不到能直接使用的類似元件，這時候就到 Dart 的套件管理網站 https://pub.dev/flutter 去找找有沒有別人寫好的套件吧~
滿幸運的是，我找到一個名為 flutter_progress_hud 的套件，整體狀態有 90 分呢~
照著文件範例修改一下 lib/pages/login.dart
 &amp;gt; 圖小，可點擊圖片看 Commit
&amp;ndash;
另外，登出的話需要跳出一個讓使用者確定登出的 AlertDialog。
如圖
AlertDialog 在 Flutter 就有提供對應的 Material 元件，修改 lib/pages/home.dart
 &amp;gt; 圖小，可點擊圖片看 Commit
 小提醒:
* pubspec.yaml dependencies 裡面需要新增 flutter_progress_hud: ^1.0.2 這套件。 * 參考: 官方文件 - Using packages
 &amp;ndash;
接下來，我們把後續的主頁面的排版先架構出來吧。
在 Day3 主頁面時可以看到我笨笨的寫了好幾個 ListTile 和 Divider，這樣的作法也許在作 Demo 時還可以使用，但實際上若有數十個、數百個不就完了嗎？</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day4</title>
      <link>https://bbsonlin.github.io/post/2019-09-13-build-android-app-with-flutter-4/</link>
      <pubDate>Fri, 13 Sep 2019 20:34:12 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-13-build-android-app-with-flutter-4/</guid>
      <description>Day 4. 首頁、路由  本系列同步發表在 第11屆鐵人賽
 中秋節到拉~ 先祝大家中秋快樂~ &amp;ndash;
好了，廢話不多說，進入今天正題囉~
主頁面 - 首頁 lib/pages/home.dart
import &amp;#39;package:flutter/material.dart&amp;#39;; // 主頁面 class MainPage extends StatelessWidget { @override Widget build(BuildContext context) { return DefaultTabController( length: 4, child: Scaffold( appBar: AppBar( titleSpacing: 0.0, title: TabBar( labelPadding: EdgeInsets.zero, tabs: &amp;lt;Widget&amp;gt;[ Tab(text: &amp;#34;Home&amp;#34;), Tab(text: &amp;#34;Repo&amp;#34;), Tab(text: &amp;#34;Activity&amp;#34;), Tab(text: &amp;#34;Issues&amp;#34;), ], ), actions: &amp;lt;Widget&amp;gt;[ IconButton( icon: Icon(Icons.search), onPressed: () {}, ) ], ), body: TabBarView( children: &amp;lt;Widget&amp;gt;[ HomePage(), Text(&amp;#34;Repo&amp;#34;), Text(&amp;#34;Activity&amp;#34;), Text(&amp;#34;Issues&amp;#34;), ], ), drawer: Drawer( .</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day3</title>
      <link>https://bbsonlin.github.io/post/2019-09-12-build-android-app-with-flutter-3/</link>
      <pubDate>Thu, 12 Sep 2019 09:28:44 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-12-build-android-app-with-flutter-3/</guid>
      <description>Day 3. 進入點、登入頁面  本系列同步發表在 第11屆鐵人賽
 今天開始進入本系列的主線 - 第一階段 UI 部份
進入點 lib/main.dart
import &amp;#34;package:flutter/material.dart&amp;#34;; import &amp;#34;package:gitme_reborn/pages/login.dart&amp;#34;; void main() =&amp;gt; runApp(GitmeRebornApp()); class GitmeRebornApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#34;Gitme Reborn&amp;#34;, theme: ThemeData( primarySwatch: Colors.blueGrey, ), home: LoginPage(), ); } } 基本上跟一般程式語言一樣進入點在 void main 這個函數，這裡頭直接調用 Flutter SDK 所提供的 runApp 函數，去啟動整個 Flutter App。
我直接將 Flutter 預設創建出來的 MyApp 稍微作些改寫，並刪除些不要的部份，剩下 20 行不到。
而這裡 runApp 函數我們帶入 GitmeRebornApp 這個 Widget 給它(StatelessWidget 表示他是沒有附加狀態的 Widget)，後續 Flutter 都會幫你處理好。</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day2</title>
      <link>https://bbsonlin.github.io/post/2019-09-11-build-android-app-with-flutter-2/</link>
      <pubDate>Wed, 11 Sep 2019 17:53:58 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-11-build-android-app-with-flutter-2/</guid>
      <description>Day 2. 環境設定、流程規劃  本系列同步發表在 第11屆鐵人賽
 開發環境  作業系統(OS): Ubuntu Desktop 18.04.2 LTS
編輯器(Editor): VS Code
Flutter 版本: stable (1.7.8+hotfix.4) Dart 版本: 2.4.0
Android SDK: 28
Android 版本: 7.1.1
手機裝置: HTC U11
手機投影工具: scrcpy
 Flutter 開發環境安裝 - https://flutter.dev/docs/get-started/install
 小提醒:
本系列只會在 Linux 或 Windows 環境上開發 Android 要開發 iOS 基本上有 Apple 的開發環境 (我很窮沒錢買 Macbook QQ
 開新專案 直接使用 flutter create 指令來開始新的專案。
$ flutter create . Creating project .... android/app/src/debug/AndroidManifest.</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day1</title>
      <link>https://bbsonlin.github.io/post/2019-09-09-build-android-app-with-flutter-1/</link>
      <pubDate>Tue, 10 Sep 2019 08:20:00 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-09-build-android-app-with-flutter-1/</guid>
      <description>Day 1. 前言、系列規劃  本系列同步發表在 第11屆鐵人賽
 緣起 老實說在學習 Flutter 並用在幾個專案後，一直想花時間整理成文章在自己的部落格。
但是寫成筆記形式，怕過於潦草之後會看不懂；寫成教學文，要讓別人看得懂勢必要花很多的時間去撰寫，這計畫就一直擱置到現，。
不過最近正好有一小段空檔期，又剛好看到鐵人賽要開始了，想藉此機來整理吧~
移動端的開發  Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native(RN) - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 會比較好   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是需要編譯的，效能上比較好  劣勢:  推出時間短(到現在兩年半)，目前版本迭代速度滿快的   NativeScript - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，與幾個現在主流的前端框架(Angular、Vue.</description>
    </item>
    
    <item>
      <title>Flutter MaterialApp 裡到底藏了什麼?</title>
      <link>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</link>
      <pubDate>Mon, 04 Mar 2019 22:08:51 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</guid>
      <description>前言 一開始創建 Flutter App 它會自己有個 Counter 的範例，到後續自己寫了很多範例跟專案正在開發； 才發現光是一個 MaterialApp 水就很深了，決定努力來看一下文檔以及源碼整理並理解。
MaterialApp  An application that uses material design.
A convenience widget that wraps a number of widgets that are commonly required for material design applications. It builds upon a WidgetsApp by adding material-design specific functionality, such as AnimatedTheme and GridPaper.
 以上是官方文檔中前兩段敘述，概略的說 MaterialApp 是根據 Material Design 風格包裝了 WidgetsApp，例如 AnimatedTheme and GridPaper。
MaterialApp 和 WidgetsApp 都屬於 StatefulWidget。
接下來看看 MaterialApp 所使用到的變數：</description>
    </item>
    
    <item>
      <title>Flutter 開始探索</title>
      <link>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</link>
      <pubDate>Thu, 15 Nov 2018 12:23:48 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</guid>
      <description>移動端的開發框架 主要考慮 React Native 和 Flutter
 Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 這框架會比較好，但 React 上手難度較高 由於使用叫高級的程式語言，效能上容易被詬病   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是能需要編譯的，效能上比較好  劣勢:  推出時間短(約一年半)，整體框架以及社群尚在發展中    備註:</description>
    </item>
    
  </channel>
</rss>