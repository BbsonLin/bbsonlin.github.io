<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mobile on Bobson&#39;s Blog</title>
    <link>https://bbsonlin.github.io/tags/mobile/</link>
    <description>Recent content in Mobile on Bobson&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Mar 2019 22:08:51 +0800</lastBuildDate>
    
	<atom:link href="https://bbsonlin.github.io/tags/mobile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutter MaterialApp 裡到底藏了什麼?</title>
      <link>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</link>
      <pubDate>Mon, 04 Mar 2019 22:08:51 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</guid>
      <description>前言 一開始創建 Flutter App 它會自己有個 Counter 的範例，到後續自己寫了很多範例跟專案正在開發； 才發現光是一個 MaterialApp 水就很深了，決定努力來看一下文檔以及源碼整理並理解。
MaterialApp  An application that uses material design.
A convenience widget that wraps a number of widgets that are commonly required for material design applications. It builds upon a WidgetsApp by adding material-design specific functionality, such as AnimatedTheme and GridPaper.
 以上是官方文檔中前兩段敘述，概略的說 MaterialApp 是根據 Material Design 風格包裝了 WidgetsApp，例如 AnimatedTheme and GridPaper。
MaterialApp 和 WidgetsApp 都屬於 StatefulWidget。
接下來看看 MaterialApp 所使用到的變數：</description>
    </item>
    
    <item>
      <title>Flutter 開始探索</title>
      <link>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</link>
      <pubDate>Thu, 15 Nov 2018 12:23:48 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</guid>
      <description>移動端的開發框架 主要考慮 React Native 和 Flutter
 Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 這框架會比較好，但 React 上手難度較高 由於使用叫高級的程式語言，效能上容易被詬病   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是能需要編譯的，效能上比較好  劣勢:  推出時間短(約一年半)，整體框架以及社群尚在發展中    備註:</description>
    </item>
    
  </channel>
</rss>