<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bobson&#39;s Blog</title>
    <link>https://bbsonlin.github.io/</link>
    <description>Recent content on Bobson&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Sep 2019 09:28:44 +0800</lastBuildDate>
    
	<atom:link href="https://bbsonlin.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day3</title>
      <link>https://bbsonlin.github.io/post/2019-09-12-build-android-app-with-flutter-3/</link>
      <pubDate>Thu, 12 Sep 2019 09:28:44 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-12-build-android-app-with-flutter-3/</guid>
      <description>Day 3. 進入點、登入頁面  本系列同步發表在 第11屆鐵人賽
 今天開始進入本系列的主線 - 第一階段 UI 部份
進入點 lib/main.dart
import &amp;#34;package:flutter/material.dart&amp;#34;; import &amp;#34;package:gitme_reborn/pages/login.dart&amp;#34;; void main() =&amp;gt; runApp(GitmeRebornApp()); class GitmeRebornApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#34;Gitme Reborn&amp;#34;, theme: ThemeData( primarySwatch: Colors.blueGrey, ), home: LoginPage(), ); } } 基本上跟一般程式語言一樣進入點在 void main 這個函數，這裡頭直接調用 Flutter SDK 所提供的 runApp 函數，去啟動整個 Flutter App。
我直接將 Flutter 預設創建出來的 MyApp 稍微作些改寫，並刪除些不要的部份，剩下 20 行不到。
而這裡 runApp 函數我們帶入 GitmeRebornApp 這個 Widget 給它(StatelessWidget 表示他是沒有附加狀態的 Widget)，後續 Flutter 都會幫你處理好。</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day2</title>
      <link>https://bbsonlin.github.io/post/2019-09-11-build-android-app-with-flutter-2/</link>
      <pubDate>Wed, 11 Sep 2019 17:53:58 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-11-build-android-app-with-flutter-2/</guid>
      <description>Day 2. 環境設定、流程規劃  本系列同步發表在 第11屆鐵人賽
 開發環境  作業系統(OS): Ubuntu Desktop 18.04.2 LTS
編輯器(Editor): VS Code
Flutter 版本: stable (1.7.8+hotfix.4) Dart 版本: 2.4.0
Android SDK: 28
Android 版本: 7.1.1
手機裝置: HTC U11
手機投影工具: scrcpy
 Flutter 開發環境安裝 - https://flutter.dev/docs/get-started/install
 小提醒:
本系列只會在 Linux 或 Windows 環境上開發 Android 要開發 iOS 基本上有 Apple 的開發環境 (我很窮沒錢買 Macbook QQ
 開新專案 直接使用 flutter create 指令來開始新的專案。
$ flutter create . Creating project .... android/app/src/debug/AndroidManifest.</description>
    </item>
    
    <item>
      <title>用 Flutter 開發一個 Android App 吧 - Day1</title>
      <link>https://bbsonlin.github.io/post/2019-09-09-build-android-app-with-flutter-1/</link>
      <pubDate>Tue, 10 Sep 2019 08:20:00 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-09-09-build-android-app-with-flutter-1/</guid>
      <description>Day 1. 前言、系列規劃  本系列同步發表在 第11屆鐵人賽
 緣起 老實說在學習 Flutter 並用在幾個專案後，一直想花時間整理成文章在自己的部落格。
但是寫成筆記形式，怕過於潦草之後會看不懂；寫成教學文，要讓別人看得懂勢必要花很多的時間去撰寫，這計畫就一直擱置到現，。
不過最近正好有一小段空檔期，又剛好看到鐵人賽要開始了，想藉此機來整理吧~
移動端的開發  Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native(RN) - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 會比較好   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是需要編譯的，效能上比較好  劣勢:  推出時間短(到現在兩年半)，目前版本迭代速度滿快的   NativeScript - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，與幾個現在主流的前端框架(Angular、Vue.</description>
    </item>
    
    <item>
      <title>前端之路 - 0 - 歷史課</title>
      <link>https://bbsonlin.github.io/post/2019-06-18-road-to-frontend-0/</link>
      <pubDate>Tue, 18 Jun 2019 09:30:23 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-06-18-road-to-frontend-0/</guid>
      <description>早期  1992 - NCSA(國家超級電腦應用中心) Mosaic 最早流行的圖形介面網頁瀏覽器 1994 - Netscape(網景) 雇用了許多原來的 NCSA Mosaic 開發者用來開發 Mosaic Netscape(後改名為 Netscape Navigator) 1995 - Microsoft 取得Mosaic的授權後，推出了 Internet Explorer 1 (IE 1)  第一次瀏覽器大戰 (1995 - 2001) Netscape(Netscape Navigator) vs Microsoft(Internet Explorer)
Netscape 方  1995 - Marc Lowell Andreessen 認為 HTML 需要一種膠水語言，後 Brendan Eich 花十天開發出 JavaScript 原型(起初稱 Mocha 和 LiveScript) 1996 - Netscape 提交 ECMA(歐洲電腦製造商協會) 提交語言標準，此標準後稱 ECMAScript (ES) 1997 - ECMA 以 JavaScript 語言為基礎制定了 ECMAScript 標準規範 ECMA-262 1998 - Netscape Navigator 開放原始碼，後由 Mozilla 組織維護  Microsoft 方  1996 - 微软模仿 JavaScript 开发了一种相近的语言，取名为 JScript，並用於 IE 3.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 5</title>
      <link>https://bbsonlin.github.io/post/2019-04-08-dart-basic-part-5/</link>
      <pubDate>Mon, 08 Apr 2019 09:30:23 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-04-08-dart-basic-part-5/</guid>
      <description>類別(Class) - 下篇  延續上一節的 類別(Class) - 中篇
 抽象類別(Abstract class)  在 類別(Class) - 中篇 我們有提到 抽象方法(Abstract methods)，抽象類別裡的函數稱作此。
這次要來深入點講解 抽象類別。
 簡單來說，抽象類別是定義其他類別的 界面 (interface) (可以想像成樣板)，所有 繼承 (extends) 或 實現 (implements) 於此 抽象類別 的類別必須要實作此 抽象類別 裡定義的所有方法。
這樣講完其實還真的是滿 &amp;ldquo;抽象&amp;rdquo; 的，所以就看看例子吧~
abstract class Shape { double get perimeter; double get area; String get name; } 以上我們自行定義個抽象類別 Shape，裡頭有三個 Getter 函數，perimeter(周長)、area(面積)、name(描述此形狀)。
接下來我們基於 Shape 來 &amp;ldquo;實現&amp;rdquo; Circle 圓形類別。
class Circle extends Shape { double radius; Circle(this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 4</title>
      <link>https://bbsonlin.github.io/post/2019-03-26-dart-basic-part-4/</link>
      <pubDate>Tue, 26 Mar 2019 14:45:27 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-26-dart-basic-part-4/</guid>
      <description>類別(Class) - 中篇  延續上一節的 類別(Class) - 上篇
 方法(Methods) Dart 中有幾種類別中的方法:
 實例方法(Instance methods) - 就是一般類別中標準的函數，使用的時候要先以類別實例化出物件，該物件才能使用此方法。 靜態方法(Static methods) - 跟一般類別中的函數很像，不過它不用實例化便可使用該方法，通常是與該類別相關所以會定義在類別裡。 抽象方法(Abstract methods) - 抽象類別中的函數，用來定義樣板(或稱界面[interface])，繼承該抽象類別後所需實現(implement)的函數。 Getters &amp;amp; Setters - 範例中 Complex 的 real 和 imaginary 運算子方法(Operator methods) - Dart 中可以 Override 幾個常用的運算子的方法，如 + - * / &amp;gt; &amp;lt; ==&amp;hellip; 等等。   != 是不可複寫的，因為它相當於 !(a == b)
 我們在 Complex 中再加入些方法吧
class Complex { // Private property(member)  num _real; num _imaginary; // Getters &amp;amp; Setters  get real =&amp;gt; _real; set real(num newReal) =&amp;gt; _real = newReal; get imaginary =&amp;gt; _imaginary; set imaginary(num newImaginary) =&amp;gt; _imaginary = newImaginary; // Constructors  Complex(this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 3</title>
      <link>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</link>
      <pubDate>Thu, 21 Mar 2019 09:57:07 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-21-dart-basic-part-3/</guid>
      <description>運算子(Operators)  四則運算、邏輯運算、程式運算等比較基礎的運算部份請參看官方文檔。
在此講一些比較特別的運算子
 as, is, is! // Type test operators  num n = 1.1; print(n is! int); print(n is double);true true 條件算符(Conditional expressions) 大部分程式語言都會有三元運算子 ?:，它可以很簡短的代替 if-else 語法。 Dart 中有幾個比較有趣的寫法 ??、?. 等。
?? 與 ?. 都會判斷左方的運算元是否為 null，再進行動作。
 此範例若有些看不懂，可以看完下面一節 類別(上) 後再回頭看一次這裡。
 class Account { String username; String password; Account({username, password}) : this.username = username, // 下面兩種寫法是等價的  // this.password = (password != null) ? password : &amp;#39;AutomaticallyGenerateSecretPassword&amp;#39;;  this.</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 2</title>
      <link>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</link>
      <pubDate>Fri, 15 Mar 2019 23:21:52 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-15-dart-basic-part-2/</guid>
      <description>變數(Variables) Dart 2 可以不宣告變數型別方式有兩種 var 和 dynamic。
這兩個看似用法相同但不一樣，其中 var 會在 Compile-time 的時候就會自行判斷你賦予此變數值的型別； 所以再次賦予不同型別的值給此變數，會出現錯誤 Error: A value of type &#39;int&#39; can&#39;t be assigned to a variable of type &#39;String&#39;.。
而 dynamic 則是能在 Run-time 時放進任何型別的變數。
var name = &amp;#34;Bobson&amp;#34;; // name = 123;  // Error: A value of type &amp;#39;int&amp;#39; can&amp;#39;t be assigned to a variable of type &amp;#39;String&amp;#39;.  print(name); dynamic myName = &amp;#34;Bobson&amp;#34;; print(myName); myName = 123; print(myName);Bobson Bobson 123  任何變數宣告出來沒賦予值的話，預設會給 null</description>
    </item>
    
    <item>
      <title>Dart 基礎 - 1</title>
      <link>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</link>
      <pubDate>Fri, 08 Mar 2019 21:29:43 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-08-dart-basic-part-1/</guid>
      <description>內建型別 (Built-in types)  Dart 內建型別全都繼承於 Object，都視為是物件。
 Dart 內建型別有下列幾種:
 Number - (int, double) num Boolean - true 或 false List - Collections of items (aka arrays) Set - Collection of unique items (Dart 2.2 正式引入) Map - Collections with associated Key Value Pairs String - &amp;ldquo;Hello!&amp;rdquo; (single and double quotes) Rune - unicode character points Symbol - #symbol (simbolic metadata)  Number num 包含了兩種型別 int, double
int x = 1; int hex = 0xFA; print(&amp;#34;int: $x, hex int: $hex&amp;#34;); double y = 1.</description>
    </item>
    
    <item>
      <title>Flutter MaterialApp 裡到底藏了什麼?</title>
      <link>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</link>
      <pubDate>Mon, 04 Mar 2019 22:08:51 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-03-04-flutter-whats-in-materialapp/</guid>
      <description>前言 一開始創建 Flutter App 它會自己有個 Counter 的範例，到後續自己寫了很多範例跟專案正在開發； 才發現光是一個 MaterialApp 水就很深了，決定努力來看一下文檔以及源碼整理並理解。
MaterialApp  An application that uses material design.
A convenience widget that wraps a number of widgets that are commonly required for material design applications. It builds upon a WidgetsApp by adding material-design specific functionality, such as AnimatedTheme and GridPaper.
 以上是官方文檔中前兩段敘述，概略的說 MaterialApp 是根據 Material Design 風格包裝了 WidgetsApp，例如 AnimatedTheme and GridPaper。
MaterialApp 和 WidgetsApp 都屬於 StatefulWidget。
接下來看看 MaterialApp 所使用到的變數：</description>
    </item>
    
    <item>
      <title>開源就是免費!?</title>
      <link>https://bbsonlin.github.io/post/2019-01-24-opensource-means-free/</link>
      <pubDate>Thu, 24 Jan 2019 21:40:45 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2019-01-24-opensource-means-free/</guid>
      <description>網路時代的來臨到普及，身為開發者觀察，開源的專案只會越來越多。
很多軟體大公司近幾年的專案或工具，直接都是開源的了。
 為何大公司們會開源？ 依我的想法至少有三個好處:
 依靠社群的力量可以精進整體開源專案
畢竟社群有很多大神都是獨立開發者，靠著社群更可以找到問題，亦或有人可以找到最佳化的方法。
 增進使用者(開發者)的使用效率
放到開源區，免不了要有些附加的文檔，也會有熱心的人研讀程式碼並給出更完善的文檔，能增進後人的有效理解且避免採坑。 找到潛在能合作或能招攬的開發人員
若有人能不斷貢獻專案，並且熱衷於開發，這些大廠能省去很多功夫找到適合的合作對象。  隨著資訊時代，很多資料變得唾手可得，很多時候也沒必要隱隱藏藏一直閉源所有的程式碼。
 但凡事有優點，必會帶來些缺點 &amp;hellip;
 開源等於免費? 開源雖然可以免費使用，但還是有些不一樣的地方，很火的開源專案必定都會跟隨著 License； MIT、BSD、GPL &amp;hellip; 族繁不及備載。
意味著開源根本就不是免費。
看過很多開源專案出現些爭議，如 AntD 聖誕結彩蛋事件。
你可以友善的提醒及指出開源專案的問題，但很多人一個腦充就變成網路酸民。
老實說，開源專案其實根本不需要負責使用者的個人開發問題 (若是有置入惡意程式碼的除外) ，但很多人把它視為理所當然開源者就該負責的。
之前有看過 Vue.js 的專案，有人只發個 issue 說，x牌手機的自製瀏覽器有問題，其他啥資訊也不提供。
Vue.js 尤大作者，很嚴肅的回應，莫非要我也跟著買一樣的手機來幫你 debug 嗎?
所以，使用開源，請記得友善的替別人想一想。自己的問題就開自己想辦法，別人頂多只能幫你一把。 有能力也記得多多支持開源的獨立開發者們。
 尊重、包容、友善
給這個開源的世界良好的環境吧！
 備註: 一切都為作者云云，別太認真了~</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 4</title>
      <link>https://bbsonlin.github.io/post/2018-12-16-opencv-tutorial-4/</link>
      <pubDate>Sun, 16 Dec 2018 14:34:25 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-16-opencv-tutorial-4/</guid>
      <description>影像平滑  從 阿洲的程式教學 | OpenCV教學 - 影像平滑 引述：
有時我們收到的影像雜訊過多，這時需要進行平滑化去除雜訊，不過為了去除雜訊，可能造成影像對比度下降，好的品質可能需要大量的處理時間，所以通常根據實際需求，選擇一個適合的手法，常見的有四種平滑方式，分別是平均平滑、高斯平滑、中值濾波、雙邊濾波，OpenCV對於這四種平滑方式皆有支援，只要呼叫即可使用。
  由濾波方式可分兩種，線性濾波和非線性濾波：
* 線性濾波：有一個有固定參數的核心，常見的有平均平滑和高斯平滑。
* 非線性濾波：沒有一個有固定參數的核心，常見的有中值濾波和雙邊濾波。
  OpenCV functions:
* 平均平滑: cv2.filter2D 與 cv2.blur
* 高斯平滑: cv2.GaussianBlur
* 中值濾波: cv2.medianBlur
* 雙邊濾波: cv2.bilateralFilter
 import cv2 import numpy as np from matplotlib import pyplot as plt def draw_on_plot(pos, src, title): plt.subplot(pos), plt.imshow(src), plt.title(title) plt.xticks([]), plt.yticks([]) img = cv2.imread(&amp;#39;data/opencv-logo-white.png&amp;#39;) draw_on_plot(241, img, &amp;#39;Original&amp;#39;) kernel = np.ones((3, 3), np.float32)/25 dst = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 3</title>
      <link>https://bbsonlin.github.io/post/2018-12-14-opencv-tutorial-3/</link>
      <pubDate>Fri, 14 Dec 2018 10:37:18 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-14-opencv-tutorial-3/</guid>
      <description>色彩空間轉換  在 Opencv-Python 學習之旅 - 1 起步 - 照片(影像) 中imread函數就有選擇讀取照片時你想要的色彩標誌參數 (BGR, HSV &amp;hellip; 等)。
在 OpenCV 中還有其他的函數來作色彩空間轉換的處理。
 import cv2 img = cv2.imread(&amp;#39;data/starry_night.jpg&amp;#39;) # Convert BGR to HSV hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) # (600, 752, 3) 1353600 &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt; print(hsv.shape, hsv.size, type(hsv)) # define range of blue color in HSV lower_blue = np.array([110, 50, 50]) upper_blue = np.array([130, 255, 255]) # Threshold the HSV image to get only blue colors mask = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 2</title>
      <link>https://bbsonlin.github.io/post/2018-12-12-opencv-tutorial-2/</link>
      <pubDate>Wed, 12 Dec 2018 16:39:26 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-12-opencv-tutorial-2/</guid>
      <description>影像基本運算 import cv2 img = cv2.imread(&amp;#39;data/messi5.jpg&amp;#39;) px = img[100, 100] print(px, px.shape, px.size, px.dtype, type(px)) # accessing only blue pixel blue = img[100, 100, 0] print(blue, type(blue)) img[100, 100] = [255, 255, 255] img[100, 101] = [255, 255, 255] print(img[100, 100]) # accessing RED value print(img.item(10, 10, 2)) # modifying RED value img.itemset((10, 10, 2), 100) print(img.item(10, 10, 2)) print(img.shape, img.size, img.dtype, type(img)) ball = img[280:340, 330:390] img[273:333, 100:160] = ball b, g, r = cv2.</description>
    </item>
    
    <item>
      <title>Opencv-Python 學習之旅 - 1</title>
      <link>https://bbsonlin.github.io/post/2018-12-11-opencv-tutorial-1/</link>
      <pubDate>Tue, 11 Dec 2018 14:18:33 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-12-11-opencv-tutorial-1/</guid>
      <description>安裝 筆者的環境使用 Ubuntu 18.04，利用 pipenv 安裝 opencv-python 套件
起步 - 照片(影像) import cv2 img = cv2.imread(&amp;#39;data/messi5.jpg&amp;#39;, 0) cv2.imshow(&amp;#39;image&amp;#39;, img) k = cv2.waitKey(0) if k == 27: # wait for ESC key to exit cv2.destroyAllWindows() elif k == ord(&amp;#39;s&amp;#39;): # wait for &amp;#39;s&amp;#39; key to save and exit cv2.imwrite(&amp;#39;out/messigray.png&amp;#39;, img) cv2.destroyAllWindows()  用 cv2.imread 讀取影像檔案，第一個參數為檔案位置(String);第二個參數為讀取影像檔的顏色參數。 第二個參數有很多選項，如 cv2.IMREAD_COLOR、cv2.IMREAD_GREYSCALE、cv2.IMREAD_UNCHANGED &amp;hellip; 更多 用 cv2.imshow 可顯示用 cv2.imread 讀取進來的影像資訊 cv2.waitKey 會等待任何鍵盤事件；cv2.destroyAllWindows 會關閉所有視窗。 按下鍵盤 s，會調用 cv2.imwrite 存處理後的 img 圖檔 相關 API 文檔 reading and writing images、user interface  # Use matplotlib from matplotlib import pyplot as plt plt.</description>
    </item>
    
    <item>
      <title>關於&#39;數據&#39;的異想天開</title>
      <link>https://bbsonlin.github.io/post/2018-11-20-whimsical-thoughts-about-data/</link>
      <pubDate>Tue, 20 Nov 2018 09:45:59 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-20-whimsical-thoughts-about-data/</guid>
      <description>近幾年來特別火的字眼像是大數據、人工智能。
稍微研究後會發現現在的人工智能，最常講的就是深度學習以及機器學習。
機器學習本人研究較多，其實最早提出來的名詞叫做統計學習；
從名稱上不外乎就是和統計、數學有關，另外還佔有一個很大的角色就是數據(Data)。
要統計出有用的模型就必定要有大量的數據。
然而稍微了解下生物學會知道我們現在普遍的人類，我們稱作智人；
最早出現的時間點是 25萬~40萬年前 (來自維基百科)。
但歷史上或考古上最早的紀錄或遺跡都只在大約離現在不到 5000 年。
大約只佔智人出現時間的 1&amp;frasl;50
古夫金字塔 B.C.2530 聖經上的大洪水 B.C.2370 大禹治水 B.C.2050±150 黃帝 B.C.2717 ~ B.C.2599 雖說中國是10000年前才進入農耕時期，難到過去二十多萬年都只是採集時期嗎?
而現今電腦不過發展不到 100 年，就出現人工智能；這種發展速度頗為奇葩。
或許在以前人類就遭到資料毀滅過，以至於現在根本找不到10000年以前的資料?
備註: 一切都為作者云云，別太認真了~</description>
    </item>
    
    <item>
      <title>Flutter 開始探索</title>
      <link>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</link>
      <pubDate>Thu, 15 Nov 2018 12:23:48 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-15-flutter-getting-start/</guid>
      <description>移動端的開發框架 主要考慮 React Native 和 Flutter
 Android/iOS - Java &amp;amp; Kotlin/Objective-C &amp;amp; Swift  優勢:  用原生的語言開發，效能很好 由於推出時間很久了，非常穩定以及能搜尋到的資源也很多  劣勢:  兩種平台須寫兩份不同語言的程式碼，開發及維護上需要較多人力資源   React Native - Javascript  優勢:  只須一種語言能編成兩種平台的 App 用前端語言開發，對於前端開發者較好上手 推出時間有五年了，整體框架算穩定以及社群也較多  劣勢:  需要先學習過 React 這框架會比較好，但 React 上手難度較高 由於使用叫高級的程式語言，效能上容易被詬病   Flutter - Dartlang  優勢:  只須一種語言能編成兩種平台的 App Dartlang 為 Java-Like 的語言，學習過 Java 會滿好上手的 Dartlang 是能需要編譯的，效能上比較好  劣勢:  推出時間短(約一年半)，整體框架以及社群尚在發展中    備註:</description>
    </item>
    
    <item>
      <title>用 Hugo 建置我的部落格 - 2</title>
      <link>https://bbsonlin.github.io/post/2018-11-14-use-hugo-to-build-my-blog-2/</link>
      <pubDate>Wed, 14 Nov 2018 11:35:17 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-14-use-hugo-to-build-my-blog-2/</guid>
      <description>上一篇 - 用 Hugo 建置我的部落格 - 1
如何讓大家都看到我? 其實 Hugo 官方文件裡有一篇 託管與佈署，裡頭有佈署到不同托管服務的方法。 不過我想這邊我就直接先使用 Github Pages 吧。
初出江湖 - 佈署到 Github Page 官方文件一開始看有點雜亂，後來是找到這位大老的教學影片才順利佈署完成
建立 Repository
 主要是建立兩個程式碼倉庫 blog 和 &amp;lt;USERNAME&amp;gt;.github.io，前者是主要編輯文章內容；後者是放置靜態網頁的部份。 啟用 &amp;lt;USERNAME&amp;gt;.github.io Github Pages 服務。(在 Repo 的 Settings -&amp;gt; Github Pages) Github Pages 的形式有兩種：  https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/ - 這種是給帳戶放置首頁的，必須要對應到 &amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io 的 Repo https://&amp;lt;USERNAME|ORGANIZATION&amp;gt;.github.io/&amp;lt;PROJECT&amp;gt;/ - 其餘你創建的 Poject Repo 的靜態網頁都可以佈署到相對應的 URL。   輸出靜態網頁
$ hugo -d ../&amp;lt;USERNAME&amp;gt;.github.io  在編輯文章內容的 Repo 下，輸出靜態網頁到放置靜態網頁 Repo 接著在將你輸出的內容 push 到 github 上就行囉~ 😃  備註:</description>
    </item>
    
    <item>
      <title>用 Hugo 建置我的部落格 - 1</title>
      <link>https://bbsonlin.github.io/post/2018-11-13-use-hugo-to-build-my-blog-1/</link>
      <pubDate>Tue, 13 Nov 2018 18:17:57 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-13-use-hugo-to-build-my-blog-1/</guid>
      <description>為什麼選 Hugo 比較了幾個常見的部落格建置工具以及其開發的語言:
 Jekyll - Ruby
 Hugo - Golang
 Hexo - Javascript
  主要原因:
 Hugo 是用 Golang 寫的，安裝的時候不用其他 package manager (Ruby 要用 gem, JS 要用 npm) Hugo 是用 Golang 寫的，整體操作的速度會較快 (詳細可能要多接觸後才了解)  個人(非必要)原因:
 開發環境大多都用 Ubuntu (沒錢買 Mac&amp;hellip;)，剛好 Ubuntu 16.04 後有 snapcraft 做軟體的管理，而 Hugo 剛好在上面有版本，安裝起來非常快。
 對於 JS 較熟(前端接觸了一年多)，Ruby 稍微有點退燒了，而 Golang 越來越火，看順便能不能藉此機會接觸一些 Golang 的專案。  備註:
- 比較的部落格建置工具均為 static site generater
- 選擇工具為個人喜好決定，並無絕對的好壞，自己用的上手最重要
尋找巨人們(資源) 經過一天的尋找，找到了些巨人們:</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://bbsonlin.github.io/post/2018-11-13-first-post/</link>
      <pubDate>Tue, 13 Nov 2018 12:17:57 +0800</pubDate>
      
      <guid>https://bbsonlin.github.io/post/2018-11-13-first-post/</guid>
      <description>This is first post  Hello Hugo Test  My blog source, generated by Hugo</description>
    </item>
    
  </channel>
</rss>